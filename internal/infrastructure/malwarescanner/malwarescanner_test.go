package malwarescanner

import (
	"context"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
)

type ScannerTestSuite struct {
	Scanner
}

func RunScannerTests(t *testing.T, scanner Scanner) {
	suite := &ScannerTestSuite{Scanner: scanner}

	t.Run("TestScan", suite.TestScan)
}

func (suite *ScannerTestSuite) TestScan(t *testing.T) {
	t.Run("with a malware", func(t *testing.T) {
		// Given
		ctx := context.Background()
		url := "https://example.com/Virus"
		var scanResult = make(chan MalwareScanResult, 1)

		// When
		suite.Scanner.Scan(ctx, url, scanResult)

		// Then
		timeout := time.After(time.Second)
		select {
		case res := <-scanResult:
			assert.Equal(t, res, MalwareScanResultDetected)
		case <-timeout:
			t.FailNow()
		}
	})
	t.Run("with no malware", func(t *testing.T) {
		// Given
		ctx := context.Background()
		url := "https://example.com"
		var scanResult = make(chan MalwareScanResult, 1)

		// When
		suite.Scanner.Scan(ctx, url, scanResult)

		// Then
		timeout := time.After(time.Second)
		select {
		case res := <-scanResult:
			assert.Equal(t, res, MalwareScanResultClear)
		case <-timeout:
			t.FailNow()
		}
	})
}
