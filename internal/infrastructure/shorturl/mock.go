// Code generated by mockery v2.32.3. DO NOT EDIT.

package shorturl

import (
	context "context"
	"urlShortenerService/domain"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}


// NewMock creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// DeleteExpired provides a mock function with given fields: ctx, duration
func (_m *MockStore) DeleteExpired(ctx context.Context, duration time.Duration) error {
	ret := _m.Called(ctx, duration)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, time.Duration) error); ok {
		r0 = rf(ctx, duration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: ctx, slug
func (_m *MockStore) Get(ctx context.Context, slug string) (domain.URLMapping, error) {
	ret := _m.Called(ctx, slug)

	var r0 domain.URLMapping
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.URLMapping, error)); ok {
		return rf(ctx, slug)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.URLMapping); ok {
		r0 = rf(ctx, slug)
	} else {
		r0 = ret.Get(0).(domain.URLMapping)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: ctx, slug, fullURL
func (_m *MockStore) Set(ctx context.Context, shortURL domain.URLMapping) error {
	ret := _m.Called(ctx, shortURL)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.URLMapping) error); ok {
		r0 = rf(ctx, shortURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}