// Code generated by mockery v2.32.3. DO NOT EDIT.

package statistics

import (
	context "context"
	domain "urlShortenerService/domain"

	mock "github.com/stretchr/testify/mock"

)

// MockStore is an autogenerated mock type for the Store type
type MockStore struct {
	mock.Mock
}

// NewMockStore creates a new instance of Store. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStore(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStore {
	mock := &MockStore{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// GetOne provides a mock function with given fields: ctx, url
func (_m *MockStore) GetOne(ctx context.Context, url string) (domain.URLStatistic, error) {
	ret := _m.Called(ctx, url)

	var r0 domain.URLStatistic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.URLStatistic, error)); ok {
		return rf(ctx, url)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.URLStatistic); ok {
		r0 = rf(ctx, url)
	} else {
		r0 = ret.Get(0).(domain.URLStatistic)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTop provides a mock function with given fields: ctx, statType
func (_m *MockStore) GetTop(ctx context.Context, statType StatisticType) ([]domain.URLStatistic, error) {
	ret := _m.Called(ctx, statType)

	var r0 []domain.URLStatistic
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, StatisticType) ([]domain.URLStatistic, error)); ok {
		return rf(ctx, statType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, StatisticType) []domain.URLStatistic); ok {
		r0 = rf(ctx, statType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.URLStatistic)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, StatisticType) error); ok {
		r1 = rf(ctx, statType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Set provides a mock function with given fields: ctx, url, statType
func (_m *MockStore) Set(ctx context.Context, url string, statType StatisticType) error {
	ret := _m.Called(ctx, url, statType)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, StatisticType) error); ok {
		r0 = rf(ctx, url, statType)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
